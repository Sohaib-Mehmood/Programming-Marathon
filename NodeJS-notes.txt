- constructor function in arrow functions.
    - new keyword for creating instances.
    - when classes was not there we use the new keyword.

- practise the async wait and promises.
- mdn link for "this" keyword.

- make a class
    - getName by vanilla function
    - and one by arrow function.

- useeffect will run after the next render.
    - return will run on the unmount.

Points to improve on ReactJS
    - differences between primitive vs reference type
    - technical differences between arrow and simple functions
    - functions hoisting with var keyword
    - where to use the IIF, and what are the benefits?
    - "this" keyword with it's four type of binding.
    - React functional vs class components
    - React Life Cycle methods
    - React all Hooks


Rest Api
	- it is an api that conforms to the constraints of the REST architecture style.
		- that there should be the client-server communication
		- statelessness
		- uniform interface
	- Beginners can assume a REST API means an HTTP service that can be called using standard web libraries and tools.
HTTP methods
	- GET
		- values are visible inside the url above
		- upto 2048 characters
		- data is visible to everyone in the url
		- The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.
	- POST
		- no characters limit
		- data is not displayed in the URL.
		- The POST method submits an entity to the specified resource, often causing a change in state or side effects on the server.
	- PUT
		- it is used to send data to a server to create/update a resource
	- DELETE
		- it deletes the specified resource.

Routing
	- routing refers to how an application's endpoint (url) respond to client requests.
	- routing is defined using methods of the Express app.
		- app.get() to handle GET requests
		- app.post() to handle POST requests
		- app.all() for all http methods
		- app.use() to specify middleware as the callback function.

		The following code is an example of a very basic route.

		const express = require('express')
		const app = express()

		// respond with "hello world" when a GET request is made to the homepage
		app.get('/', (req, res) => {
		res.send('hello world')
		})

		- another method is to use the express.router as well.
		Route handlers
			- You can provide multiple callback functions that behave like middleware to handle a request.

		- app.route()
			- you can create chainable route handlers for a route path by using app.route().
				- app.route('/book')
				.get((req, res) => {
					res.send('Get a random book')
				})
				.post((req, res) => {
					res.send('Add a book')
				})
				.put((req, res) => {
					res.send('Update the book')
				})
middleware
			- router.user();
	- are the functions that have access to the req, res and the next middleware function.
	- it is commonly denoted by the named "next"
	- if the current middleware does end the req-res cycle. it must call next() to pass control to the next middleware function.
	- Middleware functions can perform the following tasks:

		Execute any code.
		Make changes to the request and the response objects.
		End the request-response cycle.
		Call the next middleware in the stack.


	types
		- application-level middleware
			- a function is executed each time the app receives a request
			- app.use() or app.method()
		- router-level middleware
			- it is same as the alm, but it is bound to the instance of the react.router()
			- router.use() or router.get()
		- error-handling middleware
			- have the 4th parameter as well
				- app.use(err, req, res, next)
				- res.send(500).send("something broke');
		- built-in middleware
			- express.static
				- serves static assets such as html files, images, and so on.
			- express.json
				- parses incoming requests with json payload
			- express.urlencoded
				- parses incoming requests with url-encoded payloads.
		- third-party middleware
			- these are to add the functionality to the express app
				- like cookieParser
	- custome middlewares
		- an example of the myLogger function
			- that simply prints the log message
				- const myLogger = function (req, res, next){
					console.log("logged");
					next();
				}
		- another example is that
			- we can validate the cookies with the external async service.
				- externalValidateCookies(cookies.testCookie)

		- example:	check if user is logged-in or not.
			- if user is loggedin then show "about me" page.

- request validator using express validator
	- it is a set of express.js middlewares that wraps the
		- extensive collection of validators
		- sanitizer functions offered by validator.js

	- The goal of validate. js is to provide a cross framework and cross language way of validating data. The validation constraints can be declared in JSON and shared between clients and the server.
	- It allows you to combine them in many ways so that you can validate and sanitize your express requests, and offers tools to determine if the request is valid or not, which data was matched according to your validators, and so on.

- request processing pipeline
	- it is the mechanism by which requests are processed beginning with a request and ending with a response.
	- when we send a request from the browser, it goes to the middleware pipeline.
		- if there is some code in the first middleware and there is some callback to the next middleware, then it will go to the next middleware.

	- middleware order is important.
	- When a request is received by Express, each middleware that matches the request is run in the order it is initialized until there is a terminating action (like a response being sent).
		- Incoming Request -> Middleware ->next() Middleware ->next()0 middleware ->next() response
								|----------------------------------->res.send()
													|--------------->res.send()

	- So if an error occurs, all middleware that is meant to handle errors will be called in order until one of them does not call the next() function call.

Node.js
	- a runtime environment for executing js code outside of the browser.
	- ideal for building highly scalable, data-intensive and real-time apps

	- easy to get started
	- great for prototyping and agile development
	- super fast and highly scalable

	- it is not a programming language.
		- neither it should be compared with any other framework like asp.NET.
		- it is not a framework it's a runtime engine.

	- benefits
		- built twice as fast with fewer people
		- 33% fewer lines of code
		- 40% fewer files
		- 2x request/sec
		- 35% faster response time
	- javascript everywhere in the node js
	- cleaner and more consistent codebase
	- large ecosystem of open source library

	- Node Architecture / Event loop
		- runtime time environment
			- js code -> js engine -> machine code
				- chrome uses V8 (fastest)
				- firefox uses chkra
	- it is asynchronous in nature -> non-blocking architecture.
		- means a single thread is used to handle multiple requests.
		- example:
			- waiter is going to take order from multiple customers instead of waiting for once meal to be ready and then taking order from the second one.
		- this is an example of blocking / synchronous architecture.
	- when single thread sends the message to one request, it will not wait for the request to send back something, but it will move on the second request untill there's some message/data back from the first request.
		- and all of this is stored in the event queue
			- tells whether a data is being generated or not.

	- do not use node for cpu-intensive apps
		- it should only be used for the data-intensive apps

	Phases Overview
	- timers: this phase executes callbacks scheduled by setTimeout() and setInterval().
	- pending callbacks: executes I/O callbacks deferred to the next loop iteration.
	- idle, prepare: only used internally.
	- poll: retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and setImmediate()); node will block here when appropriate.
		- setImmediate() is designed to execute a script once the current poll phase completes.
		- setTimeout() schedules a script to be run after a minimum threshold in ms has elapsed.
	- check: setImmediate() callbacks are invoked here.
	- close callbacks: some close callbacks, e.g. socket.on('close', ...).


	- in node we are not having document or getelemtntbyid or something like that

	- Node Core
		- Node Module System
			- every file in a node app is considered as module.
				- they are private
			- for making it publically available, we have to export it.

			- every node application has atleast on main file
				- like app.js
			
			- we can use it as:
				- global.settimeout();
			- global Object
				- like console.log()
				- setTimeout()
				- clearTimeout()
				- setInterval()
				- clearInterval()
			- all of these are declared globally in document
			- but we cannot declare variables using that global scopes.

			- module installed using
				- npm install modulename

			- then Node looks for the module using the following searches, in turn:
				- /home/myname/myprojects/myapp/node_modules/mymodule.js
				- /home/myname/myprojects/node_modules/mymodule.js
				- /home/myname/node_modules/mymodule.js
				- /node_modules/mymodule.js

			- Creating a Module
				- logger.js file
					- var url = "http://mylogger.io/log";
					//we also need a function
					- function log(message){
						//send an HTTP request
						console.log(message)
					}

					//for making it public to be available for other, we can use the export
					- module.exports.log = log;

					//similarly, if we want to exprot the url, we can simply do the following:
					- module.exports.endPoint = url;
					//we can export one or more members based on the requirements.

					- example: CD player and buttons it is having outside.
						- we are not interested in what is implemented inside the cd player
						- we just use buttons to perform the specific task.
					
					- now exporting this module in app.js file
						//best practise is to use const when ever importing any module, instead of let or var.
						- const logger = require('./')
						- logger.log('message');

					//in node, we can export a single function or object as well like
						- module.exports = log; // we cannot write it as exports = log because we cannot change the 
					//and inside the app.js, we can simply write it as:
						- logger('message') //instead of logger.log('message');
			- Module Wrapper Function
					- now i know that variables and functions are scoped within that module and are not visible outside that module.

					- node does not execute the code directly.
						- during runtime, our code is always wrapped inside the IIF (immediately invoked function)
						- (function (exports, require, module, __filename, __dirname)){
						}
					- this is called as module wrapper function.
				- node by default comes with the tons of built-in methods.
		- build-in modules
			- OS
				- methods available
						- const os = reuquire('os');
						os.totalmem()
						os.freemem();

						- //or we can simply assign it to any variable like
							- var totalmem = os.totalmem()
							- and same for the freemem as well.
			- fs
				- this is how to work with the files.
				- const fs = require('fs');
				const { loadavg } = require('os')
				const { EventEmitter } = require('stream')

				- //remember to use asynchronous methods.
				- method to view all the files available in a specific directory.
				- fs.readdirsync('./');

				- //now for asynchronous form of this method:
					- path as first argument
					- callback function with 2 parameters(err, files) as a second argument
						- only one of the parameters will return the files otherwise it will give an error.
					- fs.readdir('./', function(err, files){
						if(err){
							console.log("error", err);
						}else{
							console.log("result", files);
						}
					});
			- events
				- one of the core concepts of node is events
				- it gives a signal that something has happened in our application.
					- example
						- we have a class called http that we can use to build a web Server.
						- everytime we receives a request on that port, that http class raises an event.
							- means reading that request and returnig the right response.
						- in documentation, several classes of node returns different types of events.
				- one of the core building block of node and  that is Class:EventEmitter
					- loading the requries module
					- remember: whenever we call the required function we use the EventEmitter. like
						- console EventEmitter = require('events');
						- note that it starts from the uppercase, means that it's  class and not a function or an object.
					- in this EventEmitter class we are having some built-in functions.
					- so it is a container that contains a bunch of different methods.

					- When a new listener is added, 'newListener' event is fired and when a listener is removed, 'removeListener' event is fired.

					- EventEmitter provides multiple properties like on and emit. on property is used to bind a function with the event and emit is used to fire an event.

					- so first we need to make the instance of this class
						- const objEventEmitter = new EventEmitter()
					- second, we need to register that event
						- objEventEmitter.on("messageLogged", function(){
							console.log("listner called");
						})
					- third, we have to raise an event.
						- objEventEmitter.emit(messageLogged);
					- and when we call this emit method, it iterates over all the registered listners and calls them synchronously.
					- often we have bunch of methods but we use to use only 2 of them most of the time
						- one id emit() to raise an event
							- //making a noise produce - singnailling.
							- objEventEmitter.emit('messageLogged')
								- if we simply run this line, nothing will happen.
								- because nowhere in our has registered an eventlistener that is interested in that event.

								- so for that an eventlistener is being created.
									- it is a function that is generated when an event is raise.
								- //how to register a listner.
								- objEventEmitter.on("messageLogged", function(){
									console.log("listner called");
								})
				- Event arguments
					- when ever we raise an event we also want to send some data as well about that event.
					- we can add aditional arguments as well which are referd to as event arguments.
						- such as
							- objEventEmitter.emti('messageLogged', {id: 1, url: 'http://'})
								- this object is known as event argument. 
							- now pass this object as a second parameter of the registered listner.
							- //output: listner called {id: 1, url: "http://"}
								- om this way, we can pass data about the event that just happened.
				- Extending objEventEmitter
					- we can extend the EventEmitter with any class as well.
						- and it will simply inherit all the methods of that EventEmitter.
					- Now here's the steps how implement events
						- create a class that extends the EventEmitter
							- it will have additional methods as well
						- and then inside the import file.
							- instead of creating the insatnce of EventEmitter we will use the instance of the class created that has extended the EventEmitter, for additional functionality.
				- example
					- we can tighten different modules together without tightly coupling them.
					- we can create an eventlistener that shows the current pizza order details.
						- by extending the eventemiter class
							- this.emit("order", size, topping);
			- http
				// importing
				- const http = require('http');
				const server = http.createServer();
				server.listen(3000);

				server.on('connection', ()=> {
					console.log("new connection...")
				})
				console.log("listening on port 3000...");

				- but we will not be using this http module for building a back-end service or a web server because in this way we have to implement at the routes in a linear way.
					- and so for that we will be using the express.js, that gives us a clean structure to handle various routes.
			- custom modules



- Templating Engine
	- A template engine enables you to use static template files in your application. At runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client. This approach makes it easier to design an HTML page.
	- module internally, as shown below (for the above example).

	- others are pug, mustache, and EJS

app.set('view engine', 'pug')
Create a Pug template file named index.pug in the views directory, with the following content:

html
  head
    title= title
  body
    h1= message
Then create a route to render the index.pug file. If the view engine property is not set, you must specify the extension of the view file. Otherwise, you can omit it.

app.get('/', (req, res) => {
  res.render('index', { title: 'Hey', message: 'Hello there!' })
})

- Job Queues using Bull
	- Bull is a Node library that implements a fast and robust queue system based on redis.

	- Although it is possible to implement queues directly using Redis commands, this library provides an API that takes care of all the low-level details and enriches Redis basic functionality so that more complex use-cases can be handled easily.

---------------------------------------------------------------------

package.json file

dev dependencies vs other dependencies
    - just for the 

event loop
    - setImmediate()
        - 

cross-origin-request-sharing


use the import and export instead of require.

//we cannot use async waits on functions that expects callbacks.


//we have to make the wrapper function over this
const sayHello = (callback) => {
    console.log('hello');
    const random = Math.random();
    if(random < 0.5){
        callback(new Error("unable to perform task"));
    }else{
        callback(undefined, "hello")
    }
}

//we cannot do this:
    - const result = 

sayHello((err, data) => {
    if(error){
        console.log("error", error);
    }else{
        console.log('Data', data)
    }
});


sayHello(callback);
sayHello(callback);
sayHello(callback);
sayHello(callback);
sayHello(callback);




we have to use the try catch when we have a rejected condition.

//timeout will run at the end
setTimeout(() => {
    console.log("set time out...");
  }, 0);
  
  setImmediate(() => {
    console.log("set immediate...");
  });
  
  //synchrounous code will run first
  console.log("settiemout vs setimmediate");
  
  //this will run first from the timmers.
  process.nextTick(() => {
    console.log("next tick...");
  });
  
  
  const fs = require('fs');
  
  function someAsyncOperation(callback) {
    // Assume this takes 95ms to complete
    fs.readFile('/path/to/file', callback);
  }
  
  const timeoutScheduled = Date.now();
  
  setTimeout(() => {
    const delay = Date.now() - timeoutScheduled;
  
    console.log(`${delay}ms have passed since I was scheduled`);
  }, 100);
  
  // do someAsyncOperation which takes 95 ms to complete
  someAsyncOperation(() => {
    const startCallback = Date.now();
  
    // do something that will take 10ms...
    while (Date.now() - startCallback < 10) {
      // do nothing
    }
  });

- Jest vs SuperTest
	- Purpose:
		- Supertest: Supertest is a library specifically designed for testing HTTP APIs. It is built on top of the SuperAgent library and is used to perform requests to the API, simulating client interactions, and asserting the responses.
		- Jest: Jest is a general-purpose testing framework developed by Facebook. It is suitable for testing JavaScript and React applications, including unit tests, integration tests, and snapshot tests. It is not limited to testing APIs.
	- Features:
		- Supertest: Supertest is focused on providing a fluent and expressive way to test APIs. Its main features include the ability to:
			- Make requests (GET, POST, PUT, DELETE, etc.) to API endpoints.
			- Chain assertions on the response object (e.g., status code, headers, body).
			- Test authentication and other middleware functions.
		-Jest: Jest provides a wide range of features that make it a powerful testing framework, such as:
			- Built-in test runner and assertion library.
			- Mocking and spying capabilities for functions and modules.
			- Snapshot testing for UI components.
			- Parallel test execution and intelligent test scheduling.
			- Code coverage reports.
			- Zero configuration for most projects.
	- Integration:
		- Supertest can be used in conjunction with Jest. While Supertest is responsible for making API requests and asserting the responses, Jest can be used to manage the overall testing process, handle test cases, and provide advanced features such as mocking and spying.
	- Popularity and Community Support:
		- Supertest is a popular library for API testing and is widely used in the JavaScript community.
		- Jest has gained significant traction in recent years, becoming one of the most popular testing frameworks for JavaScript and React applications.
	- In summary, Supertest and Jest are not competing libraries but rather complementary tools. Supertest is focused on API testing, while Jest is a general-purpose testing framework. They can be used together to create a robust testing suite for your JavaScript applications.