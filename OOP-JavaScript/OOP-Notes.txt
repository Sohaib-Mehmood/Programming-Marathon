Object Oriented Programming:
	- OOP is a fundamental and most popular Programming paradigm used by nearly every developer at some point in their career for the software developemnt.

Structure of Object Oriented Programming
	- Classes
		- user defined data types.
		- where we create a blueprint for the structure of methods and attributes.
		- classes contains fields of attributes and methods of behaviors.
		- Example: Simple Person example;
		- class Person{
			//constructor function
			constructor(name, age){
				this.name = name;
				this.age = age;
			}

			getName(){
				return this.name;
			}

			getAge(){
				return this.age;
			}
		}
	- objects
		- these are the instances of class created with specific data.
		- example: for the above person class
		- cosnt david = new Person("david", 23);

		- a new object is being created with name david
		- the constructor runs name & age arguments, and assigns values
	- attributes
		- these are the information that is being stored.
		- these are defined inside the class template and represents the state of an object.

	- methods
		- these are the functions defined inside the class template and describes the behavior of an object.
	
	- constructor method
		- we cannot have more than 1 constructor function in javascript class.
		- javascript allows us to use the parent class constructor through "super" keyword, followed by the extends keyword after the className.
		- constructor example:
			class Person{
				constructor(name, age){
					this.name = name;
					this.age = age;
				}
			}
		- "super" keyword example:
			- class Sohaib extends Person{
				constructor(email, empId){
					super();
					this.email = email;
					this.empId = empId;
				}
			}
		- static method
			- static method belogns to the class itself directly, instead of the instance of that object.
			- we can have more than one static methods inside the class.

			- but we cannot use this keyword to directly call a static method within a non-static method
			- example
				- class Test{
					static display(){
						return "statis method is invoked";
					}
				}
				console.log(Test.display())

unnamed class expression:
	- similar to the anonymous functions, we can also make the classes as well
	- example
		- const person = Class{
			constructor(name, age){
				this.name = name;
				this.age = age;
			}
		}
Prototype Objects:
	- javascript is a Prototype based language that facilitates the objects to acquire properties and features from one another.
	- whenever a new function is created, the Prototype functionality is automatically added to it.
	- syntac
		- className.prototype.methodName
	example:
		function person(fName, lName){
			this.fName = fName;
			this.lName = lName;
		}
		person.prototype.fullName = function(){
			return this.fName + " " + this.lname;
		}
		let p1 = new person("sohaib", "mehmood");
		console.log(p1.fullName()); // sohaib mehmood

4 pillar of Object Oriented Programming:
	- Encapsulation
		- it is the process of binding the attributes with data methods.
		- it allow us to control the data and validate it.
			- use var keyword to make data members private.
			- use setter and getter methods to set/get the data.
		- we should follow proper Encapsulation while making the class.
		- example
			- class Person{
				constructor(){
					var name;
					var age;
				}
				setName(name){
					this.name = name;
				}
				getName(){
					return this.name;
				}
				setAge(age){
					this.age = age;
				}
				getAge(){
					return this.age;
				}
			}
			let objPerson = new Person();
			objPerson.setName("sohaib");
			objPerson.setAge(23);
			console.log(objPerson.getName() + " " + objPerson.getName())
	- Inheritance
		- it is the mechanism that allow us to create new classes based on the already existing classes.
		- it provieds flexibility to the child class to resue the methods declared in the parent class.
		- for that "extends" keyword is being used by the child class.
		- example
			- class Company{
				constructor(){
					var compName;
				}
				setCompName(compName){
					this.compName = compName;
				}
				getCompName(){
					return this.compName;
				}
			}
			- class Microsoft{
				constructor(){
					super();
					var empStrength;
				}
			}
	- polymorphism
		- ploy means shapes and phism means many.
			- so polymorphism means different shapes.
		- a class will act differently with different parameters given to it.
		- it is the ability to call the function with different parameters.
		- example
			- class A{
				display(){
					console.log("A is invoked.");
				}
			}
			- class B extends A{
			}
	- abstraction
		- it refers to the hiding of the implementation details and only showing the functionality to the users.
		- we cannot create an instance of the abstact class.
		- javascript does support built-in abstact classes, however we can enforce one by doing such like below.
		- example
			- class Animal {
				constructor(name) {
					this.name = name;
				}

				speak() {
					throw new Error('This method must be implemented by a subclass');
				}
			}

			class Dog extends Animal {
				speak() {
					return 'Woof!';
				}
			}

			const myDog = new Dog('Fido');
			console.log(myDog.speak()); // Output: 'Woof!'

Singleton Design Pattern:
	- it is about the global state management
	- pre-requisites
		- classes in js
		- how to access dom elements
		- how object.freeze() function works
	- Design Pattern is a set of generalized instructions that provide a solution to commonly occuring problems in a software Design.

	- In singleton desing pattern, we can create only one instance of a class that can be accessed globally.
		- means a single object is shared among all the object using that singleton class.
	- disadvantages
		- we can get into the race condition.
	- example
		//fancyLogger.js
		- export default class FancyLogger{
			constructor(){
				this.logs = []
			}
			log(messages){
				this.logs.push(message);
				console.log(`FANCY: ${message}`)
			}
			printLogCount(){
				console.log(`${this.logs.length} Logs`)
			}
		}
		//firstUse.js
		import FancyLogger from './fancyLogger.js'
		//making object of fancyLogger
		const objFancyLogger = new FancyLogger();

		export default function logFirstImplementation(){
			ojbFancyLogger.printLogCount();
			ojbFancyLogger.log("Second file");
			ojbFancyLogger.printLogCount();
		}
		//secondUse.js
		import FancyLogger from './fancyLogger.js'
		//making object of fancyLogger
		const objFancyLogger = new FancyLogger();

		export default function logSecondImplementation(){
			ojbFancyLogger.printLogCount();
			ojbFancyLogger.log("Second file");
			ojbFancyLogger.printLogCount();
		}

		//index.js
		import logFirstImplementation from ''
		import logSecondImplementation from ''

		logFirstImplementation();
		logSecondImplementation();

	- converting this code to singleton pattern.
		- //fancyLogger.js
		- class FancyLogger{
			constructor(){
				if(FancyLogger.instance == null){
					this.logs = [];
					fancyLogger.instance = this;
				}
				return fancyLogger.instance;
			}
			log(messages){
				this.logs.push(message);
				console.log(`FANCY: ${message}`)
			}
			printLogCount(){
				console.log(`${this.logs.length} Logs`)
			}
		}

		const objFancyLogger = new FancyLogger();
		Ojbect.Freeze(objFancyLogger);
		export default objFancyLogger;
		//firstUse.js
		import objFancyLogger from './fancyLogger.js'
		//No need to make object of fancyLogger here

		export default function logFirstImplementation(){
			ojbFancyLogger.printLogCount();
			ojbFancyLogger.log("Second file");
			ojbFancyLogger.printLogCount();
		}
		//secondUse.js
		import objFancyLogger from './fancyLogger.js'
		//No need to make object of fancyLogger here

		export default function logSecondImplementation(){
			ojbFancyLogger.printLogCount();
			ojbFancyLogger.log("Second file");
			ojbFancyLogger.printLogCount();
		}

		//index.js
		import logFirstImplementation from ''
		import logSecondImplementation from ''

		logFirstImplementation();
		logSecondImplementation();