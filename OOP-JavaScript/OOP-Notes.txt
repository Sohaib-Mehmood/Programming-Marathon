Object Oriented Programming:
	- OOP is a fundamental and most popular Programming paradigm used by nearly every developer at some point in their career for the software developemnt.

Structure of Object Oriented Programming
	- Classes
		- user defined data types.
		- where we create a blueprint for the structure of methods and attributes.
		- classes contains fields of attributes and methods of behaviors.
		- Example: Simple Person example;
		- class Person{
			//constructor function
			constructor(name, age){
				this.name = name;
				this.age = age;
			}

			getName(){
				return this.name;
			}

			getAge(){
				return this.age;
			}
		}
	- objects
		- these are the instances of class created with specific data.
		- example: for the above person class
		- cosnt david = new Person("david", 23);

		- a new object is being created with name david
		- the constructor runs name & age arguments, and assigns values
	- attributes
		- these are the information that is being stored.
		- these are defined inside the class template and represents the state of an object.

	- methods
		- these are the functions defined inside the class template and describes the behavior of an object.
	
	- constructor method
		- we cannot have more than 1 constructor function in javascript class.
		- javascript allows us to use the parent class constructor through "super" keyword, followed by the extends keyword after the className.
		- constructor example:
			class Person{
				constructor(name, age){
					this.name = name;
					this.age = age;
				}
			}
		- "super" keyword example:
			- class Sohaib extends Person{
				constructor(email, empId){
					super();
					this.email = email;
					this.empId = empId;
				}
			}
		- static method
			- static method belogns to the class itself directly, instead of the instance of that object.
			- we can have more than one static methods inside the class.

			- but we cannot use this keyword to directly call a static method within a non-static method
			- example
				- class Test{
					static display(){
						return "statis method is invoked";
					}
				}
				console.log(Test.display())

unnamed class expression:
	- similar to the anonymous functions, we can also make the classes as well
	- example
		- const person = Class{
			constructor(name, age){
				this.name = name;
				this.age = age;
			}
		}
Prototype Objects:
	- javascript is a Prototype based language that facilitates the objects to acquire properties and features from one another.
	- whenever a new function is created, the Prototype functionality is automatically added to it.
	- syntac
		- className.prototype.methodName
	example:
		function person(fName, lName){
			this.fName = fName;
			this.lName = lName;
		}
		person.prototype.fullName = function(){
			return this.fName + " " + this.lname;
		}
		let p1 = new person("sohaib", "mehmood");
		console.log(p1.fullName()); // sohaib mehmood

4 pillar of Object Oriented Programming:
	- Encapsulation
		- it is the process of binding the attributes with functions 