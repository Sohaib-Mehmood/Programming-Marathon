MongoDb:
    - it is the document based database system that provides flexible schema designs.
    - it is not a schema based database, it's a flexible schema database.
    - it saves document in json like - bson
    - we have collection of multiple documents.

    - one column = field
    - one row = single document

    - indexes still behave the same in both,
        - b-tree
    - acid property is still same in both of them

- the very first thing that we need to do is
    - to include the mongoose in our project and open a connection to the test database on our locally running instance of mongoDB.
    - const mongoose = require('mongoose');
    - and then await mongoose.connect('mongodb://127.0.0.2:27017/test'); in the try catch box.

- first we have to define the schema type
    - then we can add any document to it.

- instances of schemas/models are documents
    - and they come up with their own built-in instance methods.
        - find()
        - save()
    - and we can also define our own custom instance methods as well.

connection:
    - You can connect to MongoDB with the mongoose.connect() method.
        - mongoose.connect('mongodb://127.0.0.1:27017/myapp');
    - This is the minimum needed to connect the myapp database running locally on the default port (27017). If connecting fails on your machine, try using 127.0.0.1 instead of localhost.

    - You can also specify several more parameters in the uri:
        - mongoose.connect('mongodb://username:password@host:port/database?options...');

    - Connection Events
        - Connections inherit from Node.js' EventEmitter class, and emit events when something happens to the connection, like losing connectivity to the MongoDB server.
            - When you're connecting to a single MongoDB server (a "standalone"), Mongoose will emit 'disconnected' if it gets disconnected from the standalone server, and 'connected' if it successfully connects to the standalone. 

schema
    - A schema is a JSON object that defines the structure and contents of your data.
    - No, the concept of schema type in MongoDB is not the same as data types in MySQL.
    - In MySQL, data types refer to the specific types of values that can be stored in a column of a table, such as integer, varchar, date, etc. These data types are used to define the structure of the table and ensure that the data stored in each column is of the appropriate type.
    - In MongoDB, schema types are used to define the structure of the data stored in a document. A document is a JSON-like data structure that can contain fields with values of different types. Schema types in MongoDB include string, number, boolean, date, array, object, and more. These schema types are used to ensure that the data stored in a document conforms to a certain structure, but they are not as strict as data types in MySQL.
    - So while both MySQL and MongoDB use types to define the structure of their data, the way they use them and the level of strictness they impose are different.

Relations
    - one-to-one and one-to-many
    - References
        - using literal in the queries.
        - we use to use the Reference of that particular thing, in our main table.
            - advantages
                - less or no redundent data at all.
            - disadvantages
                - we need to query multiple collections to get the desired output.
        - {
            "name": "john",
            "age": 28,
            "from": ["london", "uk"}],
            "purchaes": [1234, 1235]
        }

        {"__id": 1234, "name": "iphone 12", "price": 1299},
        {"__id": 1235, "name": "LG TV", "price": 1299},
        {"__id": 3456, "name": "samsung galaxy", "price": 1399},
    - Embedded Documents
        - we have to hardcore the things
            - advantages
                - you do not have to query multiple documents to get the desired output
            - disadvantages
                - this can lead to redundent or duplicate data in the collection.
        - {
            "name": "john",
            "age": 28,
            "from": ["london", "uk"}],
            "purchaes": [
                {"__id": 1234, "name": "iphone 12", "price": 1299},
                {"__id": 1235, "name": "LG TV", "price": 1299}
            ]
        },
        {
            "name": "mark",
            "age": 34,
            "from": ["berlin", "germany"}],
            "purchaes": [
                {"__id": 1234, "name": "iphone 12", "price": 1299},
                {"__id": 1235, "name": "LG TV", "price": 1299}
            ]
        }

Transaction
    - it is a set of operations used to perform a logical unit of work.
        - a Transaction generally represent change in database.

- Schema
    - it is very important
    - a mongoose schema defines the structure of the document,
    default values, validators etc
        - key: value pair
            - like what value should be attached with the respective pair.
            - like: name should be string.
                - 
            - like: boolean should be of true and false value only.
    - const playlistSchema = mongoose.Schema({
        name: {
            type: String,
            //require: true,
            require: [true, "user name is required"]
            unique: true
        },
        cType: String,
        videos: Number,
        active: Boolean,
        date: {
            type: Date,
            default: Date.now
        }
    })
    - this is an example of a schema.

Model
    - it's a class
    - a Mongoose model is a wrapper on the mongoose schema. A mongoose model provides an interface to the database for creating, querying, updating, deleting records, etc

    - for example
        - we have to have a colleciton of playlist.
            //collection creation
        - const Playlist = new mongoose.model("Playlsit", playlistSchema)

    - and meanwhile we can perform multiple queries on that model
        - like
            - deleting
            - updating etc.
middleware
    - 
Aggregation Pipeline:
    - pipeline means the possibility to execute an operation on some input and use the output as input for the next command and so on.
    - mongodb supports the pipelinig concept in Aggregation framwork. There is a set of possible stages and 



does all the queries in mongodb starts with await?
    - No, not all queries in MongoDB start with await. The use of await depends on the context in which the query is executed.

    - In MongoDB, the await keyword is typically used when executing asynchronous operations, such as querying a database using an asynchronous driver or using the async/await syntax in JavaScript.

    - For example, if you are using the official MongoDB Node.js driver and executing a query using an asynchronous method, such as findOne, then you would use await to wait for the result to be returned:

csharp
Copy code
const result = await collection.findOne({ name: "John" });
However, if you are executing a query synchronously or using a callback-based API, you would not need to use await. For example, if you are using the same Node.js driver but executing a query using the callback parameter, you would not need to use await:

javascript
Copy code
collection.findOne({ name: "John" }, function(err, result) {
  // Handle error and result
});
So, it depends on how you are executing the query and whether you are using an asynchronous API or not.


what is transaction in mongodb?
    - In MongoDB, a transaction is a set of operations that are executed as a single, atomic unit of work. Transactions provide a way to group multiple write operations into a single logical unit, such that either all of the operations succeed or none of them do. This ensures data consistency and integrity, especially in complex multi-document updates.

    - MongoDB introduced multi-document transactions in version 4.0, which allows developers to execute operations that involve multiple documents and collections, across multiple databases if necessary, as a single transaction.

    - Transactions in MongoDB use the two-phase commit protocol to ensure that all the operations in the transaction are either committed or rolled back as a single unit of work. The two-phase commit protocol involves a prepare phase, where the transaction is recorded, and a commit phase, where the transaction is either committed or rolled back based on the outcome of the prepare phase.

    - To use transactions in MongoDB, you need to start a session and specify the operations to be executed within that session. Once the session is started, you can use the withTransaction method to execute a transaction, passing in a callback function that contains the operations to be executed. If any of the operations fail, the transaction will be rolled back and an error will be returned.

Here is an example of how to use transactions in MongoDB:

    - const session = client.startSession();

    - session.withTransaction(async () => {
        await collection1.updateOne({ _id: 1 }, { $set: { name: "John" } });
        await collection2.deleteOne({ _id: 2 });
     });

    session.end();
    - In this example, a session is started using the startSession method, and a transaction is executed using the withTransaction method. The transaction includes two operations, one that updates a document in collection1 and another that deletes a document in collection2. If both operations succeed, the transaction will be committed as a single unit of work. If either operation fails, the transaction will be rolled back and an error will be returned. Finally, the session is ended using the end method.


middlewares in mongodb

    - In MongoDB, middlewares are functions that can be executed before or after certain database operations. Middlewares allow developers to add custom logic to certain events in the database lifecycle, such as document validation, query execution, and more.

    - MongoDB supports middlewares through a feature called "hooks". Hooks are functions that are executed before or after certain operations, and they can be defined for a specific collection or globally for all collections in a database. There are four types of hooks in MongoDB:

    - Document middleware: These hooks are executed before or after certain document operations, such as save, validate, and remove. Document middleware can be used to add custom validation logic, modify document data, or execute other operations related to the document being saved or removed.

    - Query middleware: These hooks are executed before or after certain query operations, such as find, findOne, and update. Query middleware can be used to add custom filters to the query, modify the query options, or execute other operations related to the query being executed.

    - Aggregate middleware: These hooks are executed before or after certain aggregate operations, such as aggregate, count, and group. Aggregate middleware can be used to add custom aggregation stages, modify the pipeline options, or execute other operations related to the aggregation being executed.

    - Model middleware: These hooks are executed before or after certain model operations, such as create, findOne, and findById. Model middleware can be used to add custom logic to model operations, such as transforming the data before saving it to the database.

    - Here is an example of how to define document middleware in MongoDB using Mongoose, a popular MongoDB Object Document Mapper (ODM) for Node.js:

javascript
Copy code
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
  password: { type: String, required: true },
});

userSchema.pre('save', async function() {
  // hash the user's password before saving to the database
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});

const User = mongoose.model('User', userSchema);
In this example, a pre hook is defined for the save operation on the userSchema schema. This hook is executed before the document is saved to the database, and it hashes the user's password using the bcrypt library before saving it to the database. This is an example of how middleware can be used to add custom logic to document operations in MongoDB.




Sohaib Mehmood
can you provide me with an example of each type of middlewrae
Sure, here's an example of each type of middleware in MongoDB:

Document middleware example:
javascript
Copy code
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
  password: { type: String, required: true },
});

userSchema.pre('save', async function() {
  // hash the user's password before saving to the database
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});

const User = mongoose.model('User', userSchema);
In this example, a pre hook is defined for the save operation on the userSchema schema. This hook is executed before the document is saved to the database, and it hashes the user's password using the bcrypt library before saving it to the database.

Query middleware example:
php
Copy code
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  price: { type: Number, required: true },
  description: { type: String },
});

productSchema.pre('find', function() {
  // limit the results to only products with a price greater than $10
  this.where({ price: { $gt: 10 } });
});

const Product = mongoose.model('Product', productSchema);
In this example, a pre hook is defined for the find operation on the productSchema schema. This hook is executed before the query is executed, and it adds a filter to the query that limits the results to only products with a price greater than $10.

Aggregate middleware example:
php
Copy code
const mongoose = require('mongoose');

const saleSchema = new mongoose.Schema({
  date: { type: Date, required: true },
  total: { type: Number, required: true },
});

saleSchema.pre('aggregate', function() {
  // group the sales by year and month
  this.group({
    _id: {
      year: { $year: "$date" },
      month: { $month: "$date" }
    },
    total: { $sum: "$total" }
  });
});

const Sale = mongoose.model('Sale', saleSchema);
In this example, a pre hook is defined for the aggregate operation on the saleSchema schema. This hook is executed before the aggregation is executed, and it adds a $group stage to the pipeline that groups the sales by year and month and calculates the total sales for each group.

Model middleware example:
php
Copy code
const mongoose = require('mongoose');

const bookSchema = new mongoose.Schema({
  title: { type: String, required: true },
  author: { type: String, required: true },
  publishedDate: { type: Date },
});

bookSchema.pre('create', function(next, book) {
  // set the publishedDate to the current date if not specified
  if (!book.publishedDate) {
    book.publishedDate = new Date();
  }
  next();
});

const Book = mongoose.model('Book', bookSchema);
    - In this example, a pre hook is defined for the create operation on the bookSchema schema. This hook is executed before the document is saved to the database, and it sets the publishedDate to the current date if it's not specified in the document.


what is aggregation pipeline in mongodb?
    - The aggregation pipeline in MongoDB is a framework for data aggregation that allows you to process and transform data in a collection through a series of stages. The pipeline consists of a sequence of stages, where each stage performs a specific operation on the input documents and passes the results to the next stage.

    - Each stage in the pipeline is a document that describes an operation to perform on the input documents. The pipeline stages can include operations such as filtering, grouping, sorting, projecting, and calculating new fields.

    - Here's an example aggregation pipeline that demonstrates the use of some of the most common pipeline stages:

        db.sales.aggregate([
          { $match: { date: { $gte: ISODate("2021-01-01"), $lt: ISODate("2022-01-01") } } },
          { $unwind: "$items" },
          { $group: { _id: "$items.product", totalSales: { $sum: "$items.quantity" } } },
          { $sort: { totalSales: -1 } },
          { $limit: 10 },
          { $project: { _id: 0, product: "$_id", totalSales: 1 } }
        ])
    - In this example, the pipeline consists of six stages:

$match: filters the input documents to only include sales that occurred between January 1, 2021 and December 31, 2021.
$unwind: deconstructs the items array in each document, creating a separate document for each item in the array.
$group: groups the documents by product and calculates the total quantity sold for each product.
$sort: sorts the results by the total quantity sold in descending order.
$limit: limits the results to the top 10 products by total quantity sold.
$project: projects only the product and totalSales fields in the output documents, and renames the _id field to product.


aggregation lookup vs populate?
    - Both aggregation $lookup and populate are used in MongoDB to link documents from multiple collections together. However, there are some differences between the two approaches.


    - lookup is a more flexible and powerful approach, as it allows you to perform more complex data transformations and aggregations between multiple collections.
    - populate is simpler and easier to use, as you only need to specify the path to the referenced document in the schema and Mongoose handles the rest.
    - lookup is performed as part of an aggregation pipeline, which means it can be combined with other pipeline stages to perform more advanced queries.
    - populate is not performed as part of an aggregation pipeline, which means it cannot be combined with other pipeline stages.
    - lookup returns the joined documents as a new array in the output document, while populate replaces the referenced _id field with the referenced document.
    
    - Overall, $lookup is more suitable for complex queries that require advanced data transformations and aggregations, while populate is more suitable for simpler queries that only require basic document linking.


SQL vs. NoSQL Databases
    - Data modeling: SQL databases use a rigid, predefined schema to organize and store data, while NoSQL databases allow for more flexible and dynamic data models.

    - Scalability: NoSQL databases are designed to scale horizontally and can easily add more nodes to the database cluster, while SQL databases are designed to scale vertically, meaning they require more powerful hardware to handle larger data volumes.

    - Data consistency: SQL databases maintain strong consistency and ensure that data is always accurate and up-to-date, while NoSQL databases trade off some consistency for scalability and performance.

    - Query language: SQL databases use SQL as a standardized query language to interact with data, while NoSQL databases use their own query languages or APIs.

    - Use cases: SQL databases are often used for structured, transactional data such as financial data or inventory management, while NoSQL databases are better suited for unstructured or semi-structured data such as social media data, user profiles, or log files.

    - Overall, the choice between SQL and NoSQL databases depends on the specific requirements of the application, the type of data being stored, and the scalability needs of the system.



comparison operators in mongodb
    - MongoDB provides a variety of comparison operators that can be used in queries to compare values against each other. Here are some commonly used comparison operators in MongoDB:

    - $eq: Matches values that are equal to a specified value.
        - Example: { age: { $eq: 30 } }

    - $ne: Matches values that are not equal to a specified value.
        - Example: { age: { $ne: 30 } }

    - $gt: Matches values that are greater than a specified value.
        - Example: { age: { $gt: 30 } }

    - $gte: Matches values that are greater than or equal to a specified value.
        - Example: { age: { $gte: 30 } }

    - $lt: Matches values that are less than a specified value.
        - Example: { age: { $lt: 30 } }

    - $lte: Matches values that are less than or equal to a specified value.
        - Example: { age: { $lte: 30 } }

    - $in: Matches any of the values specified in an array.
        - Example: { status: { $in: [ "active", "pending" ] } }

    - $nin: Matches none of the values specified in an array.
        - Example: { status: { $nin: [ "inactive", "expired" ] } }

    - $exists: Matches documents that contain a specific field or do not contain a specific field.
        - Example: { name: { $exists: true } }

    - $type: Matches documents that have a specific data type for a field.
        - Example: { age: { $type: "number" } }